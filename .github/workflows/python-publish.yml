# This workflow will upload a  Python Package to PyPI when a release is created
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Processing

on:
  push:
    branches: [ main ] # Run tests and linting on every push to main
  release:
    types: [published] # Publish only when a release is created

jobs:
  # --- TESTING TASK ---
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        optional-deps: [none, numba, cupy, all]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[test]
        
          if [ "${{ matrix.optional-deps }}" = "numba" ]; then
            pip install .[performance-numba]
          elif [ "${{ matrix.optional-deps }}" = "cupy" ]; then
            pip install .[performance-cupy]
          elif [ "${{ matrix.optional-deps }}" = "all" ]; then
            pip install .[performance]
          fi
      
      - name: Run tests and collect coverage 
        run: |
          pytest --cov=src --cov-report=xml:coverage-${{ matrix.python-version }}-${{ matrix.optional-deps }}.xml tests/
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.optional-deps }}
          path: coverage-${{ matrix.python-version }}-${{ matrix.optional-deps }}.xml
          retention-days: 1

  upload-coverage:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install coverage tools
        run: |
          python -m pip install --upgrade pip
          pip install coverage[toml]
          
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports/
          merge-multiple: true
          
      - name: List downloaded files
        run: |
          echo "Downloaded coverage files:"
          ls -la coverage-reports/
          
      - name: Combine coverage reports
        run: |
          echo "Combining coverage reports..."
          cd coverage-reports
                    
          python3 -c "
import xml.etree.ElementTree as ET
import os
import glob
xml_files = glob.glob('*.xml')
print('Found', len(xml_files), 'XML files:', xml_files)
if not xml_files:
    print('No XML files found!')
    exit(1)
base_tree = ET.parse(xml_files[0])
base_root = base_tree.getroot()
file_coverage = {}
for xml_file in xml_files:
    print('Processing', xml_file)
    tree = ET.parse(xml_file)
    root = tree.getroot()
    for package in root.findall('.//package'):
        for class_elem in package.findall('classes/class'):
            filename = class_elem.get('filename')
            if filename not in file_coverage:
                file_coverage[filename] = {'line_hits': {}, 'class_elem': class_elem}
            for line in class_elem.findall('lines/line'):
                line_num = int(line.get('number'))
                hits = int(line.get('hits', 0))
                file_coverage[filename]['line_hits'][line_num] = max(file_coverage[filename]['line_hits'].get(line_num, 0), hits)
combined_root = ET.Element('coverage')
combined_root.set('version', base_root.get('version', ''))
combined_root.set('timestamp', base_root.get('timestamp', ''))
sources = ET.SubElement(combined_root, 'sources')
source = ET.SubElement(sources, 'source')
source.text = '.'
packages = ET.SubElement(combined_root, 'packages')
package = ET.SubElement(packages, 'package')
package.set('name', '.')
package.set('line-rate', '1.0')
package.set('branch-rate', '1.0')
package.set('complexity', '0')
classes = ET.SubElement(package, 'classes')
total_lines = 0
total_covered = 0
for filename, data in file_coverage.items():
    class_elem = ET.SubElement(classes, 'class')
    class_elem.set('name', filename.replace('/', '.').replace('.py', ''))
    class_elem.set('filename', filename)
    lines_elem = ET.SubElement(class_elem, 'lines')
    file_lines = 0
    file_covered = 0
    for line_num, hits in data['line_hits'].items():
        line_elem = ET.SubElement(lines_elem, 'line')
        line_elem.set('number', str(line_num))
        line_elem.set('hits', str(hits))
        file_lines += 1
        if hits > 0:
            file_covered += 1
    total_lines += file_lines
    total_covered += file_covered
    line_rate = file_covered / file_lines if file_lines > 0 else 0
    class_elem.set('line-rate', str(round(line_rate, 4)))
    class_elem.set('branch-rate', '1.0')
    class_elem.set('complexity', '0')
overall_rate = total_covered / total_lines if total_lines > 0 else 0
combined_root.set('line-rate', str(round(overall_rate, 4)))
combined_root.set('branch-rate', '1.0')
package.set('line-rate', str(round(overall_rate, 4)))
print('Combined coverage:', total_covered, '/', total_lines, '=', str(round(overall_rate * 100, 2)) + '%')
combined_tree = ET.ElementTree(combined_root)
ET.indent(combined_tree, space='  ')
combined_tree.write('../combined-coverage.xml', encoding='utf-8', xml_declaration=True)
print('Saved combined coverage to combined-coverage.xml')
"
          
      - name: Verify combined coverage
        run: |
          echo "Combined coverage file:"
          ls -la combined-coverage.xml
          echo "Coverage content preview:"
          head -20 combined-coverage.xml
          
      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./combined-coverage.xml
          flags: combined-coverage
          name: combined-coverage-report
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  # --- LINTING TASK ---
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11' # One version is enough for linting
      - name: Install linters
        run: pip install .[lint]
      - name: Check formatting with Black
        run: black --check .
      - name: Lint with Ruff
        run: ruff check .


  # --- DOCUMENTATION DEPLOYMENT TASK ---
  deploy-docs:
    runs-on: ubuntu-latest
    # Launch after successful testing and linting
    needs: [test, lint]
    permissions:
      contents: write # Needed for publication on gh-pages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
      - name: Install documentation dependencies
        run: |
          pip install -r docs/requirements.txt
          pip install -e .
      - name: Build and deploy documentation
        # This command will automatically build the site and push it to the gh-pages branch
        run: PYTHONPATH=src mkdocs gh-deploy --force --clean


  # --- COLLECTION AND PUBLICATION TASK ---
  build-and-publish:
    runs-on: ubuntu-latest
    # The publication will be triggered ONLY when the release is created
    # AND if the tests and linting are successful
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [test, lint]
    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/p/dscience_tools

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
